name: Deploy container on EC2 host

on:
  push:
    branches:
      - main

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Repo checkout
      uses: actions/checkout@v2

    - name: Setting AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Amazon ECR Login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Deploy to EC2
      env:
        EC2_PEM_KEY: ${{ secrets.AWS_PEM }}
        EC2_HOST: ${{ secrets.AWS_HOST }}
        EC2_USER: ${{ secrets.AWS_USER }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: counter-app
        IMAGE_TAG: latest
      run: |
        # Save PEM key to file and set permissions
        echo "$EC2_PEM_KEY" > ec2.pem
        chmod 400 ec2.pem

        # SSH, SCP commands
        SSH_COMMAND="ssh -i ec2.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST"
        SCP_COMMAND="scp -i ec2.pem -o StrictHostKeyChecking=no"

        #Login to Docker registry
        $SSH_COMMAND "aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin $ECR_REGISTRY"
        
        # Copy docker-compose.yml to EC2 server
        $SCP_COMMAND docker-compose.yml $EC2_USER@$EC2_HOST:/home/ubuntu/docker/
        
        # Pull and run the Docker container on EC2
        $SSH_COMMAND "cd /home/ubuntu/docker/ && sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG && sudo docker compose -f docker-compose.yml up -d --force-recreate"
        
        # Cleanup PEM key
        #rm -f ec2.pem
